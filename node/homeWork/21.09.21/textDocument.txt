Сессии—
JS: Express
В информатике, а конкретно в сетях, сессия — это интерактивный обмен информацией, также известный как диалог между
 двумя или более общающимися устройствами, или между компьютером и пользователем. Сессия (cеанс)
 устанавливается в определённый момент времени и позже завершается.

Так как HTTP — это клиент-серверный протокол, HTTP сессия состоит из трёх фаз:

1. Клиент устанавливает TCP соединение (или другое соединение, если не используется TCP транспорт).
2. Клиент отправляет запрос и ждёт ответа.
3. Сервер обрабатывает запрос и посылает ответ, в котором содержится код статуса и соответствующие данные.


Express-session

В web-разработке под сессией понимается промежуток времени, в течении которого пользователь находится
 на сайте. Сессия начинается в момент захода на сайт и заканчивается при закрытии вкладки браузера или
 при переходе в пределах текущей вкладки на другой ресурс, и позволяет сохранять, например, данные в
 действиях пользователя, которые не теряются при переходе на другую страницу.

Во время инициализации Node.js сессии с помощью объекта можно задать следующие опции:
/************************************************************
*cookie - настройка cookie хранения идентификатора сессии, передается объект с опциями (подробно здесь);

*genid - функция, которая возвращает новый идентификатор сессии в виде строки (по умолчанию используется
 функция, генерирующая идентификаторы на основе библиотеки uid-safe);

*resave - булевое значение, указывает, нужно ли пересохранять сессию в хранилище,
 если она не изменилась (по умолчанию false);

*rolling - булевое значение, указывающее, нужно ли устанавливать идентификатор сессии cookie
 на каждый запрос (по умолчанию false);

*saveUninitialized - булевое значение, если true, то в хранилище будут попадать пустые сессии;

*secret - строка, которой подписывается сохраняемый в cookie идентификатор сессии;

*store - экземпляр хранилища, которое будет использоваться для хранения сессии (рассмотрено ниже в этой статье).
/************************************************************
/************************************************************
/************************************************************
/************************************************************

Session + Cookies - самая древняя (но это не точно) и распространенная реализация сессий. Алгоритм её работы
прост: при первом запросе сервер инициализирует элемент в хранилище с уникальным идентификатором и устанавливает
этот ID в Cookies. При следующих запросах браузер присылает эту куку автоматически и сервер с помощью ID
восстанавливает объект из хранилища. Просто, быстро, но не всегда надежно и не всегда можно реализовать без
костылей (имеются ввиду API, мобильные приложения, игры, высоко нагруженные масштабируемые решения).


Максимальный размер файла cookie
Поскольку весь объект сеанса кодируется и сохраняется в файле cookie, возможно превышение максимального
размера файла cookie в разных браузерах. Спецификация RFC6265 рекомендует, чтобы браузер ДОЛЖЕН разрешать

Не менее 4096 байт на файл cookie (измеряется как сумма длины имени, значения и атрибутов файла cookie)

cookie-session не требует какой-либо базы данных / ресурсов на стороне сервера, хотя
 общие данные сеанса не могут превышать максимальный размер файла cookie браузера.

cookie-session может упростить определенные сценарии с балансировкой нагрузки.

cookie-session может использоваться для хранения «легкого» сеанса и включать идентификатор
 для поиска во вторичном хранилище, поддерживаемом базой данных, чтобы сократить количество операций поиска в базе данных.

 Параметры файлов cookie
 Другие параметры передаются cookies.get()и cookies.set()позволяют вам управлять безопасностью, доменом, путем и подписью среди других параметров.

 Параметры также могут содержать любое из следующего (полный список см. В документации модуля cookie :

  maxAge: число, представляющее миллисекунды от Date.now()истечения срока

  expires: Date объект, указывающий дату истечения срока действия cookie (по умолчанию истекает в конце сеанса).
  path: строка, указывающая путь к cookie (/по умолчанию).
  domain: строка, указывающая домен cookie (нет по умолчанию).

  sameSite: логическое значение или строка, указывающая, является ли файл cookie файлом cookie «того же сайта»
 (false по умолчанию). Это может быть установлено 'strict', 'lax', 'none' или true(который отображает 'strict').

  secure: логическое значение, указывающее, должен ли cookie пересылаться только по HTTPS (false по умолчанию для
 HTTP, true по умолчанию для HTTPS). Если для этого параметра установлено значение, trueа Node.js не работает
 напрямую через TLS-соединение, обязательно прочитайте, как настроить Express за прокси-серверами, иначе cookie
 может никогда не установиться правильно.

  httpOnly: логическое значение, указывающее, должен ли файл cookie пересылаться только по
 HTTP (S) и быть недоступным для клиентского JavaScript (true по умолчанию).

  signed: логическое значение, указывающее, должен ли быть подписан файл cookie (true по умолчанию).

  overwrite: логическое значение, указывающее, перезаписывать ли ранее установленные файлы cookie
 с тем же именем (true по умолчанию).


Чем отличаются express-session V session-cookit

Основное различие между ними связано с тем, как и где хранятся данные сеанса. Сеанс cookie в основном используется
для облегченных приложений сеанса, где данные сеанса хранятся в файле cookie, но в клиенте [браузере], в то время как
экспресс-сеанс хранит только идентификатор сеанса в файле cookie на стороне клиента, сохраняя данные сеанса полностью
на сервере. Сеанс cookie полезен в приложениях, где база данных не используется в фоновом режиме. Однако данные сеанса
 не могут превышать размер файла cookie

Веб-токен JSON (JWT) - это открытый стандарт (RFC 7519), который определяет компактный и автономный способ безопасной
 передачи информации между сторонами в виде объекта JSON. Эту информацию можно проверить и доверять, потому что она
 имеет цифровую подпись. JWT могут быть подписаны с использованием секрета (с помощью алгоритма HMAC) или пары открытого
 закрытого ключей с использованием RSA или ECDSA.

    Какова структура веб-токена JSON?
    Заголовок
    Полезная нагрузка
    Подпись
    xxxxx.yyyyy.zzzzz
    {
      "alg": "HS256",
      "typ": "JWT"
    }

