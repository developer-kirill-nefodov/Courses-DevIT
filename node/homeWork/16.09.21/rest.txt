Что такое REST?

REST - это набор правил о том, как программисту организовать написание кода серверного приложения
REST, как и многое в мире IT, — это акроним, сокращение от английского
 Representational State Transfer — передача состояния представления.


Ресурс — это все, что вы хотите показать внешнему миру через ваше приложение

Чтобы объяснить суть restful api для чайников, можно представить калькулятор на любом компьютере.
Когда мы нажимаем на кнопки, желая получить расчеты, скрытые функции начинают взаимодействовать

Концепция REST API¶
Основная идеи REST API заключается в разделении разных операций (чаще всего CRUD)
 при обращении к одному и тому же URL с помощью HTTP методов, основные из которых:

GET - используется для получения данных;
POST - используется для создания новой записи(ей);
PUT - используется для обновления уже существующей записи(ей);
PATCH - используется для обновления, но только тогда, когда изменяется идентификатор записи(ей);
DELETE - используется для удаления записи(ей).


1. Приведение архитектуры к модели клиент-сервер
В основе данного ограничения лежит разграничение потребностей.
 Необходимо отделять потребности клиентского интерфейса от потребностей сервера,
  хранящего данные. Данное ограничение повышает переносимость клиентского кода
  на другие платформы, а упрощение серверной части улучшает масштабируемость системы.
   Само разграничение на “клиент” и “сервер” позволяет им развиваться независимо друг от друга.

2. Отсутствие состояния
Архитектура REST требует соблюдения следующего условия.
 В период между запросами серверу не нужно хранить информацию
 о состоянии клиента и наоборот. Все запросы от клиента должны быть
  составлены так, чтобы сервер получил всю необходимую информацию
  для выполнения запроса. Таким образом и сервер, и клиент могут
  "понимать" любое принятое сообщение, не опираясь при этом на предыдущие сообщения.

3. Кэширование
Клиенты могут выполнять кэширование ответов сервера.
У тех, в свою очередь, должно быть явное или неявное обозначение
 как кэшируемых или некэшируемых, чтобы клиенты в ответ на последующие
 запросы не получали устаревшие или неверные данные.

Правильное использование кэширования помогает полностью или
 частично устранить некоторые клиент-серверные взаимодействия,
  ещё больше повышая производительность и расширяемость системы.


4. Единообразие интерфейса
К фундаментальным требованиям REST архитектуры относится и унифицированный,
 единообразный интерфейс. Клиент должен всегда понимать, в каком формате и
  на какие адреса ему нужно слать запрос, а сервер, в свою очередь, также
  должен понимать, в каком формате ему следует отвечать на запросы клиента.
   Этот единый формат клиент-серверного взаимодействия, который описывает,
    что, куда, в каком виде и как отсылать и является унифицированным интерфейсом

5. Слои Под слоями подразумевается иерархическая структура сетей.
 Иногда клиент может общаться напрямую с сервером, а иногда — просто с
  промежуточным узлом. Применение промежуточных серверов способно повысить
   масштабируемость за счёт балансировки нагрузки и распределённого кэширования.


Приведем пример.

Представим себе некоторое мобильное приложение, которое пользуется
популярностью во всем мире. Его неотъемлемая часть — загрузка картинок.
 Так как пользователей — миллионы человек, один сервер не смог
  бы выдержать такой большой нагрузки.

Разграничение системы на слои решит эту проблему. Клиент запросит картинку
 у промежуточного узла, промежуточный узел запросит картинку у сервера,
 который наименее загружен в данный момент, и вернет картинку клиенту.
 Если здесь на каждом уровне иерархии правильно применить кэширование,
 то можно добиться хорошей масштабируемости системы.

6. Код по требованию (необязательное ограничение)
Данное ограничение подразумевает, что клиент может расширять свою функциональность,
 за счет загрузки кода с сервера в виде апплетов или сценариев.
Обзор REST. Часть 1: что такое REST - 2
Преимущества, которые дает REST
У приложений, которые соблюдают все вышеперечисленные ограничения, есть такие преимущества:
надёжность (не нужно сохранять информацию о состоянии клиента, которая может быть утеряна);
производительность (за счёт использования кэша);
масштабируемость;
прозрачность системы взаимодействия;
простота интерфейсов;
портативность компонентов;
лёгкость внесения изменений;
способность эволюционировать, приспосабливаясь к новым требованиям.

HTTP метод
Метод HTTP (англ. HTTP Method) — последовательность из любых символов, кроме управляющих и разделителей, которая
указывает на основную операцию над ресурсом. Существует несколько общепринятых методов HTTP. Перечислим те из них, которые наиболее часто используются в RESTful сервисах:
GET — служит для получения информации о конкретном ресурсе (через ID) либо о коллекции ресурсов;
POST — служит для создания нового ресурса;
PUT — служит для изменения ресурса (через ID);
DELETE — служит для удаления ресурса (через ID).

REST — ресурсом может быть что угодно: пользователь, документ, отчет, заказ. Все это может быть как
 абстракцией некоторой сущности, так и чем-то конкретным, например, файлом — картинкой, видео,
  анимацией, PDF файлом.

