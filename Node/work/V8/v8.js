const v8 = require('v8');
const fs = require('fs');

const writeStream = fs.createWriteStream('./snapshot.heapsnapshot');

/*
  Модуль v8 предоставляет API-интерфейсы, относящиеся к версии V8, встроенной в двоичный файл Node.js.
*/

/*
  v8.cachedDataVersionTag();
  Возвращает целое число, представляющее тег версии, полученный из версии V8, флагов командной строки и обнаруженных функций ЦП.
  Это полезно для определения совместимости буфера cachedData vm.Script с этим экземпляром V8.
  console.log(v8.cachedDataVersionTag());
*/

/*
  v8.getHeapCodeStatistics();
  Возвращает объект со следующими свойствами:
    code_and_metadata_size: <number>
    bytecode_and_metadata_size: <number>
    external_script_source_size:  <number>

  console.log(getHeapCodeStatistics());
*/

/*
  v8.getHeapSnapshot();
  Возвращает: <stream.Readable> Читаемый поток, содержащий моментальный снимок кучи V8.
  Генерирует снимок текущей кучи V8 и возвращает поток Readable,который можно использовать для чтения сериализованного представления JSON.
  Этот формат потока JSON предназначен для использования с такими инструментами,как Chrome DevTools.
  Схема JSON недокументирована и специфична для движка V8.Поэтому схема может меняться от одной версии V8 к другой.

  const stream = v8.getHeapSnapshot();
  stream.pipe(writeStream);
*/

/*
  v8.getHeapSpaceStatistics();
  Возвращает статистику о пространствах кучи V8, т. Е.
  Сегментах, составляющих кучу V8. Ни упорядочение пространств кучи, ни доступность пространства кучи не могут быть гарантированы,
  поскольку статистика предоставляется через функцию GetHeapSpaceStatistics V8 и может изменяться от одной версии V8 к другой.

  Возвращаемое значение представляет собой массив объектов,содержащих следующие свойства:
    space_name<string>
    space_size<number>
    space_used_size<number>
    space_available_size<number>
    physical_space_size<number>

    Подсказка по space_name:
      new_space: здесь размещается большинство объектов.
      New-space имеет небольшой размер и предназначен для очень быстрой сборки мусора, независимо от других пространств.
      old_pointer_space: содержит большинство объектов, которые могут иметь указатели на другие объекты.
        Большинство объектов перемещаются сюда после того, как какое-то время выживут в новом пространстве.
      old_data_space: содержит объекты, которые содержат только необработанные данные (без указателей на другие объекты).
        Строки, числа в штучной упаковке и массивы распакованных двойников перемещаются сюда после того,
          как какое-то время выживут в новом пространстве
      large_object_space: это пространство содержит объекты, размер которых превышает пределы других пространств.
        Каждый объект получает свою собственную область памяти mmap'd. Сборщик мусора никогда не перемещает большие объекты.
      Code_space: здесь размещаются объекты кода, содержащие JIT-инструкции.
        Это единственное пространство с исполняемой памятью (хотя коды могут быть выделены в пространстве больших объектов, и они также являются исполняемыми).
      Cell_space, property-cell-space и map-space:
        эти пространства содержат Cells, PropertyCells и Maps соответственно.
        Каждое из этих пространств содержит объекты одинакового размера и имеет некоторые ограничения в отношении того,
        на какие объекты они указывают, что упрощает сбор.

    console.log(v8.getHeapSpaceStatistics());
*/


/*
  v8.getHeapStatistics();
  Возвращает объект со следующими свойствами:
    total_heap_size<number>
    total_heap_size_executable<number>
    total_physical_size<number>
    total_available_size<number>
    used_heap_size<number>
    heap_size_limit<number>
    malloced_memory<number>
    peak_malloced_memory<number>
    does_zap_garbage<number>
    number_of_native_contexts<number>
    number_of_detached_contexts<number>

  does_zap_garbage - это логическое значение 0/1, которое указывает, --zap_code_space ли опция --zap_code_space или нет.
  Это заставляет V8 перезаписывать мусор в куче битовым шаблоном.
  Размер RSS (размер резидентного набора) увеличивается, поскольку он постоянно затрагивает все страницы кучи, что снижает вероятность их замены операционной системой.

  number_of_native_contexts Значение native_context - это количество текущих активных контекстов верхнего уровня.
  Увеличение этого числа со временем указывает на утечку памяти.

  number_of_detached_contexts Значение detached_context - это количество контекстов, которые были отсоединены и еще не собраны мусором.
  Ненулевое значение этого числа указывает на потенциальную утечку памяти.
  console.log(v8.getHeapStatistics());
*/

/*
  v8.setFlagsFromString(flags);
  Метод v8.setFlagsFromString() может использоваться для программной установки флагов командной строки V8.
  Этот метод следует использовать с осторожностью. Изменение настроек после запуска виртуальной машины может привести к непредсказуемому поведению, включая сбои и потерю данных; или он может просто ничего не делать.
  Параметры V8, доступные для версии Node.js, можно определить, запустив Node --v8-options .

  Дважды подумать перед использованием, так как может все сломать.

  v8.setFlagsFromString('--trace_gc');
  setTimeout(() => { v8.setFlagsFromString('--notrace_gc'); }, 60e3);
*/

/*
  writeHeapSnapshot([filename]);
  Снапшот можно залить в девтулзы хрома в разделе memory.
  Записывает снапшот кучи v8 в [filename].
  v8.serialize();
  v8.deserialize();
  Сериализация и десериализация.
  Пока нашел применение только для копирования.
  Не может копировать функции кинет ошибку.
*/
