/** TTY это то, с чего собственно началась наша любимая консоль
 Изначально Телетайп (получил название от компании Teletype Corporation)
 - это электромеханическая печатная машинка, которую в начале 20х годов 20 столетия начали использовать для передачи текстовых
 сообщений между двумя абонентами. Спустя почти 40 лет возникла неободимость для ввода и вывода информации с первого в истории
 интерактвиного компьютера PDP-1. Инженеры решили не изобретать велосипед и напрямую подключили Телетайп к этому компьютеру
 и назвали это дело... КОНСОЛЬЮ.

 Далее это устройство развивалась и развивалось, но особенно стоит отметить начало 90х и Релиз Linux 0.95
 Именно в этой версии сформировалась TTY абстракция, наиболее близкая к тому, что мы имеем в последних дистрибутивах

 /dev/ttyX – виртуальное устройство консоли в файловой системе, которое заняло место UART-драйвера и с которым мы уже знакомы. На этом же уровне располагаются устройства /dev/vcsX и /dev/vcsaX, общение с ними осуществляется непосредственно через /dev/ttyX.
 TTY Line Discipline — драйвер, который делает ECHO набираемой команды и дает нам возможности ее редактирования. Также драйвер этого слоя генерирует сигналы при наборе управляющих последовательностей (^C, ^Z и т.д.). По умолчанию здесь царствует N_TTY, однако этот модуль можно заменить, например, своим драйвером – с этим поэкспериментируем немного позже;
 TTY driver – драйвер, который предоставляет набор методов инициализации и открытия консоли, а также методы, обрабатывающие операции ввода/вывода, приостановку консоли при переключении и возобновление ее работы и, конечно, обеспечивает «передачу» полученной от пользователя команды активному процессу.

 если ввести ls /dev можно увидеть подсистему TTY, а именно устройства ttyX, vcsX, ptmx, ptsX

 TTY по сути это виртуальная консоль, которая имеет свой идентификатор и файл виртуального устройства TTY, которых в директории dev существует аж 64 штуки

 В Linux есть мультиплексор псевдотелетайпа, который обрабатывает соединения от всех псевдотелетипов окон терминала (PTS).
 Мультиплексор является ведущим, а PTS — ведомыми. Мультиплексор адресуется ядром через файл устройства, расположенный в /dev/ptmx.

 Команда tty напечатает имя файла устройства, который ваш ведомый псевдотелетайп использует для взаимодействия с мастером. И это, по сути, номер вашего окна терминала.

 Ответ показывает, что мы подключены к файлу устройства по адресу /dev/pts/2.

 Наше окно терминала, которое представляет собой программную эмуляцию телетайпа (TTY),
 взаимодействует с мультиплексором псевдотелетайпа как псевдотелетайп (PTS). И его номер два.

 Команда who отобразит информацию обо всех вошедших в систему пользователях, включая вас.

 Вы можете получить доступ к полноэкранному сеансу TTY, удерживая клавиши Ctrl+Alt и нажав одну из функциональных клавиш.

 Ctrl+Alt+F3 вызовет приглашение входа на tty3.

 Если вы войдёте в систему и введёте команду tty, вы увидите, что подключены к /dev/tty3.

 это виртуальный телетайп (эмулируемый аппаратно). Он использует экран и клавиатуру, подключённые к вашему компьютеру, для имитации виртуального телетайпа

 Чтобы вернуться в графическую среду рабочего стола, нажмите Ctrl+Alt+F2.

 Нажав Ctrl+Alt+F1, вы вернётесь в окно входа в систему в сеансе графического рабочего стола.

 Наличие доступа к этим полноэкранным консолям позволяет людям, использующим установки Linux только из командной строки — а многие серверы Linux настроены таким образом — иметь несколько доступных консолей.

 Вы когда-нибудь работали на Linux-машине с графической средой рабочего стола и что-то заставляло ваш сеанс зависать? Теперь вы можете перейти к одному из сеансов консоли TTY, чтобы попытаться исправить ситуацию.

 Вы можете использовать top и ps, чтобы попытаться идентифицировать отказавшее приложение, затем используйте kill, чтобы завершить его, или просто используйте shutdown, чтобы попытаться завершить работу настолько изящно, насколько позволяет состояние компьютера.

 https://www.youtube.com/watch?v=66fogFupHdw
 */

// TTY модуль предоставляет нам tty.ReadStream и tty.WriteStream классы.
// Дока НОДЫ говорит цитирую: в большинстве случаев нет необходимости или даже возможности использовать этот модуль напрямую, однако подключить его можно


// const tty = require('tty');

// tty.ReadStream // представляет читающую сущность TTY. обычно process.stdin является единственным инстансом tty.ReadStreamи дока Ноды говорит что создавать что-то еще нет необходимости

// что по сути происходит внутри ноды
// т.е грубо говоря он сливает данные выбранных потоков в одно окно

/*
TTY может контролировать любой терминал, к которому есть открытый поток и которые поддерживают потоковый интерфейс терминала
У любого процесса поумолчанию открываются потоки 0 - stdin, 1 - stdout и 2 - stderr,
связывающие его с родительским (запустившим) процессом, если запуск был из терминала,
то таким процессом является терминал и нода применяет модуль TTY к данным потокам автоматически
*/

/**
 const tty = require('tty');
 if(tty.isatty(0)) {
  process.stdin = new tty.ReadStream();
} else {
  //init process.stdin from other stream
}

 const outStream;
 if(tty.isatty(1)) {
  outStream = new tty.WriteStream();
  process.stdout = outStream;
} else {
  //init process.stdout from other stream
}

 if(tty.isatty(2)) {
  if(!outStream) {
    outStream = new tty.WriteStream();
  }
  process.stderr = outStream;
} else {
  //init process.stderr from other stream
}
 */


/*
writeStream.cursorTo(x[, y][, callback])

writeStream.getColorDepth([env])
*/

// рыбка которая плавает
