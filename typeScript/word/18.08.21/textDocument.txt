typescript ооп

/***************************************************************/

                           Классы

/***************************************************************/
               Поля для чтения
Полям класса в процессе работы программы можно присваивать различные значения,
 которые соответствуют типу полей. Однако TypeScript также позволяет определять поля для чтения,
 значения которых нельзя изменить(кроме как в конструкторе).
 Для определения таких полей применяется ключевое слово readonly:

class User {

    readonly name: string = "Default user";
    age: number;
    constructor(userName: string, userAge: number) {

        this.name = userName;
        this.age = userAge;
    }
    print(){
        console.log(`name: ${this.name}  age: ${this.age}`);
    }
}

Значение полей для чтения можно установить либо при объявлении:

class User {
readonly name: string = "user";
}

Либо в конструкторе:

class User {
readonly name: string = "user";

constructor(userName: string) {
    this.name = userName;
 }
}

В остальных местах программы значение этого поля нельзя изменить. Например, в следующем случае мы получим
при компиляции ошибку, потому что пытаемся установить поле для чтения:

let tom = new User("Tom");
tom.name = "Bob";       // ! Ошибка - поле name - только для чтения

/***************************************************************/

Наследование
Одним из ключевых моментов объектно-ориентированной парадигмы является наследование.
В TypeScript наследование реализуется с помощью ключевого слова extends

class Person {

    name: string;
    constructor(userName: string) {

        this.name = userName;
    }
    print(): void {
        console.log(`Имя: ${this.name}`);
    }
}

class Employee extends Person {

    company: string;
    work(): void {
        console.log(`${this.name} работает в компании ${this.company}`);
    }
}

При наследовании класс Employee перенимает весь функционал класса Person - все его
свойства и функции и может их использовать. И также можно определить в подклассе
 новые свойства и методы, которых нет в классе Person.

/***************************************************************/
Модификаторы доступа

Модификаторы доступа позволяют сокрыть состояние объекта от внешнего
доступа и управлять доступом к этому состоянию. В TypeScript три
модификатора: public, protected и private.


Если к свойствам и функциям классов не применяется модификатор,
то такие свойства и функции расцениваются как будто они определены
с модификатором public. То есть следующее определение класса:

class Person {
     name: string;
     year: number;
 }

 Будет эквивалентно:

 class Person {
     public name: string;
     public year: number;
 }


 Если же к свойствам и методам применяется модификатор private,
  то к ним нельзя будет обратиться извне при создании объекта
  данного класса.

   class Person {
       private _name: string;

       constructor(name: string) {
           this._name = name;
       }

       private setYear(age: number): number {
           return new Date().getFullYear() - age;
       }
   }

   const tom = new Person("Tom", 24);

   // console.log(tom._name); // нельзя обратиться, так как _name - private



    Модификатор protected определяет поля и методы, которые из вне класса видны только в классах-наследниках:

    class Person {
        protected name: string;
        constructor(name: string) {
            this.name = name;
        }

        protected printPerson(): void {

            console.log(`Имя: ${this.name}`);
        }
    }

    class Employee extends Person {

        constructor(name: string) {
            super(name);
        }
        public printEmployee(): void {
            this.printPerson();                     // метод printPerson доступен, так как protected
            console.log(`Компания: ${this.company}`);
        }
    }

    let sam = new Employee("Sam", 31, "Microsoft");
    sam.printEmployee();
/***************************************************************/

1. Создайте 2 класса и в них private элементы которые равняються какомуто числу
поменяйте значения private элемента 1 класса на значения 2 класса
выведите в консоль изменённый элемент

2.